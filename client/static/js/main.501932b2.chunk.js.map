{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","sha1","require","crypto","ec_pem","baseUrl","props","_this","Object","_Users_uneeb123_Documents_Bitpay_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_uneeb123_Documents_Bitpay_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_uneeb123_Documents_Bitpay_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","_handlePassword","event","setState","password","target","value","_verifyPassword","preventDefault","body","state","fetch","method","JSON","stringify","headers","Content-Type","response","status","json","token","verified","catch","e","console","error","_enterPasswordUI","react__WEBPACK_IMPORTED_MODULE_5___default","onSubmit","type","placeholder","onChange","className","_generateKeys","ecdh","createECDH","generateKeys","privKey","getPrivateKey","pubKey","getPublicKey","pem","keysGenerated","publicKey","privateKey","_submitKey","encodePublicKey","key","_handleMessage","message","_generateKeysUI","keyBody","_submitMessage","msg","Buffer","from","sign","createSign","update","sig","encodePrivateKey","log","_submitMessageUI","Component"],"mappings":"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","file":"static/js/main.501932b2.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\n\nconst sha1 = require('sha1');\nconst crypto = require('crypto');\nconst ec_pem = require('ec-pem');\nconst baseUrl = \"http://localhost:8000/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: \"\",\n      verified: false,\n      keysGenerated: false,\n      publicKey: \"\",\n      privateKey: \"\",\n      ready: false,\n      token: null,\n      pem: null,\n    };\n  }\n\n  _handlePassword = (event) => {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  _verifyPassword = (event) => {\n    event.preventDefault();\n    let encryptedPassword = sha1(this.state.password);\n    let body = {\n      password: encryptedPassword\n    };\n    fetch(baseUrl + \"verify/\", {\n        method: 'POST',\n        body:    JSON.stringify(body),\n        headers: { 'Content-Type': 'application/json'}\n    }).then((response) => {\n      if (response.status === 200) {\n        response.json().then((json) => {\n          this.setState({\n            token: json.token,\n            verified: true\n          });\n        }).catch((e) => {\n          console.error(e);\n        });\n      }\n      else {\n        console.error(\"Incorrect password\");\n      }\n    }).catch((e) => {\n      console.error(e);\n    });\n  }\n\n  _enterPasswordUI = () => {\n    return (\n      <form onSubmit={this._verifyPassword}>\n        <input type=\"password\" value={this.state.password}\n          placeholder=\"Enter password\" onChange={this._handlePassword} />\n        <br />\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Enter\" />\n      </form>\n    );\n  }\n\n  _generateKeys = (event) => {\n    event.preventDefault();\n    const ecdh = crypto.createECDH('secp521r1');\n    ecdh.generateKeys();\n    let privKey = ecdh.getPrivateKey('hex');\n    let pubKey = ecdh.getPublicKey('hex');\n    let pem = ec_pem(ecdh, 'secp521r1');\n    this.setState({\n      keysGenerated: true,\n      publicKey: pubKey,\n      privateKey: privKey,\n      pem: pem,\n    });\n  }\n\n  _submitKey = (event) => {\n    event.preventDefault();\n    let pubKey = this.state.pem.encodePublicKey();\n    let body = {\n      token: this.state.token,\n      key: pubKey,\n    };\n    fetch(baseUrl + \"store/\", {\n      method: 'POST',\n      body:    JSON.stringify(body),\n      headers: { 'Content-Type': 'application/json'}\n    }).then((response) => {\n      if (response.status === 200) {\n        this.setState({\n          ready: true\n        });\n      } else {\n        console.error(response.status);\n      }\n    }).catch((e) => {\n      console.error(e);\n    });\n  }\n\n  _handleMessage = (event) => {\n    this.setState({\n      message: event.target.value\n    });\n  }\n\n  _generateKeysUI = () => {\n    let keyBody;\n    if (this.state.keysGenerated) {\n      keyBody = (\n        <div>\n          <div>Pub key: {this.state.publicKey}</div>\n          <div>Priv key: {this.state.privateKey}</div>\n          <form onSubmit={this._submitKey}>\n            <input type=\"submit\" className=\"btn btn-primary\" value=\"Share\" />\n          </form>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <form onSubmit={this._generateKeys}>\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Generate keys\" />\n        </form>\n        {keyBody}\n      </div>\n    );\n  }\n\n  _submitMessage = (event) => {\n    event.preventDefault();\n    let msg = Buffer.from(this.state.message);\n    var sign = crypto.createSign('sha256');\n    sign.update(msg);\n    let sig = sign.sign(this.state.pem.encodePrivateKey());\n\n    let body = {\n      message: msg,\n      sig: sig,\n      key: this.state.pem.encodePublicKey(),\n    };\n    fetch(baseUrl + \"talk/\", {\n      method: 'POST',\n      body:    JSON.stringify(body),\n      headers: { 'Content-Type': 'application/json'}\n    }).then((response) => {\n      if (response.status === 200) {\n        console.log(\"Successfully received\");\n      } else {\n        console.error(response.status);\n      }\n    }).catch((e) => {\n      console.error(e);\n    });\n  }\n\n  _submitMessageUI = () => {\n    return (\n      <div>\n        <form onSubmit={this._submitMessage}>\n          <textarea value={this.state.message}\n            placeholder=\"Enter message\" onChange={this._handleMessage} />\n          <br />\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n\n  render() {\n    let verified = this.state.verified;\n    let ready = this.state.ready;\n    let body;\n    if (!verified) {\n      body = this._enterPasswordUI();\n    } else {\n      if (!ready) {\n        body = this._generateKeysUI();\n      } else {\n        body = this._submitMessageUI();\n      }\n    }\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            {body}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}